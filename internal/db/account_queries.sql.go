// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: account_queries.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO account (
    name, email
) VALUES (
    $1, $2
) RETURNING id, name, email
`

type CreateAccountParams struct {
	Name  string
	Email string
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRow(ctx, createAccount, arg.Name, arg.Email)
	var i Account
	err := row.Scan(&i.ID, &i.Name, &i.Email)
	return i, err
}

const getAccount = `-- name: GetAccount :one
SELECT id, name, email FROM account
    WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAccount(ctx context.Context, id pgtype.UUID) (Account, error) {
	row := q.db.QueryRow(ctx, getAccount, id)
	var i Account
	err := row.Scan(&i.ID, &i.Name, &i.Email)
	return i, err
}

const listAccounts = `-- name: ListAccounts :many
SELECT id, name, email FROM account
    ORDER BY name
`

func (q *Queries) ListAccounts(ctx context.Context) ([]Account, error) {
	rows, err := q.db.Query(ctx, listAccounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(&i.ID, &i.Name, &i.Email); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
